from abc import abstractproperty

from ..hdl import *
from ..build import *


__all__ = ["MicrochipSmartFusion2Platform"]


class MicrochipSmartFusion2Platform(TemplatedPlatform):

    toolchain = "Libero"

    device  = abstractproperty()
    package = abstractproperty()
    speed   = abstractproperty()
    suffix  = ""

    required_tools = [
        "libero",
    ]

    def get_direction(self, pin_dir):
        if pin_dir == "i":
            return "INPUT"
        else:
            return "OUTPUT"

    def iter_smartfusion2_pin_constraints(self):
        for res, pin, port, attrs in self._ports:
            if isinstance(res.ios[0], Pins):
                if not self.should_skip_port_component(port, attrs, "io"):
                    if "DEDICATED_IO" in attrs:
                        pin_contraints_attrs = ""
                    else:
                        pin_contraints_attrs = "-iostd LVCMOS25 -RES_PULL None -fixed yes"
                    yield port.io.name, res.ios[0].map_names(self._conn_pins, res)[0], res.ios[0].dir, pin_contraints_attrs
            else:
                assert False

    file_templates = {
        **TemplatedPlatform.build_script_templates,
        "build_{{name}}.sh": r"""
            # {{autogenerated}}
            set -e{{verbose("x")}}
            if [ -z "$BASH" ] ; then exec /bin/bash "$0" "$@"; fi
            [ -n "${{platform._toolchain_env_var}}" ] && . "${{platform._toolchain_env_var}}"
            {{emit_commands("sh")}}
        """,
        "{{name}}.v": r"""
            /* {{autogenerated}} */
            {{emit_verilog()}}
        """,
        "{{name}}.tcl": r"""
            # {{autogenerated}}
            new_project -location {./libera-a} -name {libera-a} -project_description {} \
                -block_mode 0 -standalone_peripheral_initialization 0 -instantiate_in_smartdesign 1 \
                -ondemand_build_dh 1 -use_relative_path 0 -linked_files_root_dir_env {} \
                -hdl {VERILOG} -family {SmartFusion2} \
                -die {{'{'}}{{platform.device}}{{'}'}}  -package {{'{'}}{{platform.package}}{{'}'}} \
                -speed {{'{'}}{{platform.speed}}{{'}'}} -die_voltage {{'{'}}{{platform.voltage}}{{'}'}} -part_range {{'{'}}{{platform.temperature}}{{'}'}} \
                -adv_options {DSW_VCCA_VOLTAGE_RAMP_RATE:100_MS} \
                -adv_options {IO_DEFT_STD:LVCMOS 2.5V} -adv_options {PLL_SUPPLY:PLL_SUPPLY_25} \
                -adv_options {RESTRICTPROBEPINS:1} -adv_options {RESTRICTSPIPINS:0} \
                -adv_options {SYSTEM_CONTROLLER_SUSPEND_MODE:0} -adv_options {TEMPR:COM} \
                -adv_options {VCCI_1.2_VOLTR:COM} -adv_options {VCCI_1.5_VOLTR:COM} \
                -adv_options {VCCI_1.8_VOLTR:COM} -adv_options {VCCI_2.5_VOLTR:COM} \
                -adv_options {VCCI_3.3_VOLTR:COM} -adv_options {VOLTR:COM}

            import_files \
                -convert_EDN_to_HDL 0 \
                -io_pdc {./top.pdc} \
                -hdl_source {./top.v}
            
            save_project
            
            build_design_hierarchy
            
            set_root -module {top::work}
            
            organize_tool_files \
                -tool {PLACEROUTE} \
                -file "./libera-a/constraint/io/top.pdc" \
                -module {top::work} \
                -input_type {constraint}
            
            update_and_run_tool -name {PLACEROUTE}
            
            save_project
        """,
        "{{name}}.pdc": r"""
        # {{autogenerated}}

        #
        # IO banks setting
        #
        set_iobank Bank1 -vcci 2.50 -fixed no
        set_iobank Bank6 -vcci 2.50 -fixed no

        #
        # I/O constraints
        #
        {% for port_name, pin_name, pin_direction, contraints_attrs in platform.iter_smartfusion2_pin_constraints() -%}
            set_io {{port_name}} -DIRECTION {{platform.get_direction(pin_direction)}} -pinname {{pin_name}} {{contraints_attrs}}
        {% endfor %}

        """

    }

    command_templates = [
        r"""
        {{invoke_tool("libero")}}
            script:{{name}}.tcl
            logfile:{{name}}.log
        """
    ]


    def get_input(self, pin, port, attrs, invert):
        self._check_feature("single-ended input", pin, attrs,
                            valid_xdrs=(0, 1, 2), valid_attrs=True)
        m = Module()
        m.submodules[pin.name] = Instance("INBUF",
            i_PAD=port.io,
            o_Y=pin.i
        )
        return m



    def get_output(self, pin, port, attrs, invert):
        self._check_feature("single-ended output", pin, attrs,
                            valid_xdrs=(0, 1, 2), valid_attrs=True)
        m = Module()
        m.submodules[pin.name] = Instance("OUTBUF",
            o_PAD=port.io,
            i_D=pin.o,
        )
        return m


